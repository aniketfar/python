object is any realtime entity which has state and behaviour

state(variable) / behaviour(functionality)

2 types of object 

1. tangible objects - touch and feel


2. intangilble obj - which can be only feel

Class is a blue print of object or it is collection of variables and methods.


How many classes are there in Java?
five
package-level, 
nested top-level, 
member, 
local, or anonymous. (
The last four kinds are called inner classes . 



Primitive types  - There are 8: boolean , byte , char , short , int , long , float and double . 

Non-Primitive Data Types: These data types are not actually defined by the programming language but are created by the programmer.
...
They are as follows:
boolean data type.
byte data type.
char data type.
short data type.
int data type.
long data type.
float data type.
double data type.

Wrapper class ---- 
	convert the Java primitives into the reference types (objects). 
	they “wrap” the primitive data type into an object of that class. 
	
	
	. What is Java String Pool?
 a collection of Strings which are stored in heap memory. In this, whenever a new object is created, String pool first checks whether the object is already present in the pool or not. If it is present, then the same reference is returned to the variable else new object will be created in the String pool and the respective reference will be returned.
	
	public class StringTest
{

    public static void main(String[] args)
    {
        String s1 = "Cat";
        String s2 = "Cat";
        String s3 = "Dog";
        String s4 = new String("Cat");

        System.out.println("s1 == s2 : " + (s1 == s2));
        System.out.println("s1 == s3 : " + (s1 == s3));
        System.out.println("s1 == s3 : " + (s1 == s4));
    }

}
Output
s1 == s2 : true
s1 == s3 : false
s1 == s3 : false
	

Constructor -----  can be defined as the special type of method that is used to initialize the state of an object. It is invoked when the class is instantiated, and the memory is allocated for the object. 
Every time, an object is created using the new keyword, the default constructor of the class is called. The name of the constructor must be similar to the class name. The constructor must not have an explicit return type.

Super()
Whenever a child class constructor gets invoked it implicitly invokes the constructor of parent class. You can also say that the compiler inserts a super(); statement at the beginning of child class constructor.

class MyParentClass {
   MyParentClass(){
	System.out.println("MyParentClass Constructor");
   }
}
class MyChildClass extends MyParentClass{
   MyChildClass() {
	System.out.println("MyChildClass Constructor");
   }
   public static void main(String args[]) {
	new MyChildClass();
   }
}
Output:

MyParentClass Constructor
MyChildClass Constructor

Encapsulation - wrapping up of data(variables) and code(methods) together. grouing somthing into single unit.
				
	in 2 ways
	1. declare variables as private.
	2. provide public getter and setter method to modify and view the variables values.
	
	




Abstraction -  is to show only essential features and hide implementation details.
			   Cannot  create object/instantiate abstract class
			   Used to delcare only common characteristics

in 2 ways 

1.abstract class
2.Interfaces 

Interface - An interface is a reference type in Java. 
			It is a collection of abstract methods. 
			A class implements an interface, thereby inheriting the abstract methods of the interface.



* Interface
 * 1. Interface is abstract in nature
	Only method declaration
	collection of abstract methods
 * 2. no body method -- only prototype
 * 3. In interface, we can declare the variables, vars are default static in nature
 * 4. vars value will not be changed
 * 5. No static method in interface
 * 6. no main method
 * 7. We cannot create the object of interface



Polymorphism - one thing having many forms 

2 ways 

1. Method overloading -  Static Polymorphism also known as compile time polymorphism

//	Method overloading --> when the method name is same with different arguments (different data types)
//	or input parameters within the same class
//	you cannot create method inside a method
//	Duplicate methods -- i.e same method name with same number of arguments are not allowed
//	We cannot create duplicate methods

2. Method Overriding - Dynamic Method Dispatch, Dynamic Polymorphism also known as runtime polymorphism

Child class object can be referred to as parent class reference variable


Inheritance - creating a new class from existing base class.

Parent child relationship
	
There are four main OOP concepts in Java. These are:

Abstraction. Abstraction means using simple things to represent complexity. We all know how to turn the TV on, but we don’t need to know how it works in order to enjoy it. In Java, abstraction means simple things like objects, classes, and variables represent more complex underlying code and data. This is important because it lets avoid repeating the same work multiple times.

Encapsulation. This is the practice of keeping fields within a class private, then providing access to them via public methods. It’s a protective barrier that keeps the data and code safe within the class itself. This way, we can re-use objects like code components or variables without allowing open access to the data system-wide.

Inheritance.  It lets programmers create new classes that share some of the attributes of existing classes. This lets us build on previous work without reinventing the wheel.

Polymorphism. This Java OOP concept lets programmers use the same word to mean different things in different contexts. One form of polymorphism in Java is method overloading. That’s when different meanings are implied by the code itself. The other form is method overriding. That’s when the different meanings are implied by the values of the supplied variables. See more on this below.

Method overriding, it allows child class to provide a specific implementation of a method that is already provided by one of its parent classes.
The implementation in the subclass overrides (replaces) the implementation in the superclass by providing a method that has same name, same parameters or signature, and same return type as the method in the parent class.[


class Thought {
    public void message() {
        System.out.println("I feel like I am diagonally parked in a parallel universe.");
    }
}

public class Advice extends Thought {
    @Override  // @Override annotation in Java 5 is optional but helpful.
    public void message() {
        System.out.println("Warning: Dates in calendar are closer than they appear.");
    }
}

output

Thought parking = new Thought();
parking.message();  // Prints "I feel like I am diagonally parked in a parallel universe."

Thought dates = new Advice();  // Polymorphism
dates.message();  // Prints "Warning: Dates in calendar are closer than they appear."


access specifier - enables visiblity mode




clASS syntax - 

either class can be public or default

access specifier  class classname
{

		Variables  --> datatype variables;
		
		
		
		+
		
		
		
		methods    --> return type methodname(datatype V1, datatype V2......)
						{
								...............
								...............
								...............
						
						}

}


methods - block of statement

method does not return any value


Interview - what is the difference between instance var and local variable

Local variables are visible only in the method or block they are declared whereas instance variables can been seen by all methods in the class. Place where they are declared: Local variables are declared inside a method or a block whereas instance variables inside a class but outside a method

instance variableby default below
 
- int --> 0

float/double --> 0.0

string = null;

boolean = false;



public class demo
{
		int a, b ; ---> instance/class level
		
		void acceptData(int n1, int n2)
		{
				
		
		}
		

}


How to create object

syntax :

Classname varname;  
 demo d;     --> refernce variable use in polymorphism
 
 varname = new classname();
 d = 

new is used to allocate memory/space at runtime 


syntax to access methos of the class:

objectname. methodname(val1,val2.....)


Demo d = new Demo();
d.acceptData(10,20);
d.show();


object are stored in HEAP

methods are stored in STACK



Syntax to access system variable outside the class:

objectname.variablename;

keywords - words which are pre defined 


TYPE CASTING

Converting one data type into another daya type is type casting

Implicit type casting - lower data conversion to higher datatype

Explict type casting - Higher data conversion to lower datatype



Polymorphism

1. runtime polymorphism

2. compile time polymorphism



Method overloading is same method name, same return type with different number and type of parameter.

void addition(int a, int b)
{

void addition(float a, float b)
{
}

void addition(int a, float b)
{
}

keyword "this" - always your current object

used with 1. variable
			2. method


Contructor - construct a memory		
Can we overload the constructor? -->  yes
Constructor overloading - create new object every time for constructor


do we have destructors in java? --> No instead  (garbage collector) is used in java
destructor - destroy memory 



STATIC
In Java, static keyword is mainly used for memory management.
 It can be used with variables, methods, blocks and nested classes. 
 It is a keyword which is used to share the same variable or method of a given class. 
 static is used for a constant variable or a method that is same for every instance of a class

Static - always related to class and not with object

Static variables --- are allocated memory only once during class loading 
and copy of that memory is shared by all the objects of the class

syntax to create static variable

Static datatype varname = value;

when to mark a variable as static?

whenever we want to assign common properties to the object mark the variable as static

note - static variables are always instance variable never local variables

syntax to call static variable outside the class

classname.varname;

Static variables are used to persist or retain values between method calls

You can change the value of static variable

static variable is not a constant variable

Static methods 

are the methods which are executed even before creation of any object


syntax 
static return type methodname()
{
......
......
......
}

classname.methodname;

static method  can access only static variable and static methods.


Static block in a block which is executed even before main method

syntax 

Static 
{
.....
.....
}

example

Class demo
{
	static
	{
	sop"block1"
	}
	
	static
	{
	sop"block2"
	}
	void show()
	{
		sop"In show";
	}

}


class demomain
{	
static
{
sop "dono mai bhi"
}

PSVM
{

}



}




**Default constructor

**Super Keyword

The super keyword refers to superclass (parent) objects. 
It is used to call superclass methods, and to access the superclass constructor. 
The most common use of the super keyword is to eliminate the confusion between superclasses and subclasses that have methods with the same name.

this has to be inside the constructor only


If want to have a parent class constructor then u need to have child class constructor also


** runtime polymorphism / dynamic method dispatch


1. method overriding is mandatory part.

2. refernce varible creation syntax = CLassname variable name;  always for parent class

	A ref;

3. B obj1 = new B();
   C obj2 = new C();
   D obj3 = new D();

4. ref = obj2;
   ref.show();
   ref = obj1;
   ref.show();   
   ref = obj3;
   ref.show();   
   
OR 

A ref = new B();
ref.show();



Anonymous object is an object with no name.
syntax: new classname();
	new B();

Abstract - to show only essential feature and declaration  and the defination of this method is given by the child class
,and hide the implementation part.


Syntax method

Abstract returntype methodname();
   
   
 Abstract class - it is a class for which no obj can be created.
 it can contain - 
 methids 
 variables
 constructor
 
 it is not abstract class should contain abstract method.

 
 If there is atleast one abstract method in a class then the class has to be declared as abstract.
 
 syntax - 
 
 Abstarct class classname 
 {
 
 }
   
   
  Jenkins - 1b70d1c698de415591b795c5fd7892a5 - key
  first name - aniket
  last name - farkase
  email - aniketfarkase51@gmail.com
  
  Jenkins Credential
	
  Username:aniket

Password: @nIket51!!

Confirm password: @nIKet51!!

Full name:aniket farkase

E-mail address: aniketfarkase51@gmail



GIT hub  - 

username - aniketfar 
pSSWORD - @nIKet51
  
   
   
**************************
Explicit Wait command,  -  
 the WebDriver is directed to wait until a certain condition occurs before proceeding with executing the code.
 The explicit wait is used to tell the Web Driver to wait for certain conditions (Expected Conditions) or the maximum time exceeded before throwing an "ElementNotVisibleException" exception.
 
 --- WebDriverWait wait=new WebDriverWait(driver, 20);
 ----WebElement guru99seleniumlink;
	guru99seleniumlink= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath( "Xpath link")));
	guru99seleniumlink.click();
	
	The following are the Expected Conditions that can be used in Explicit Wait

1 alertIsPresent()
2 elementSelectionStateToBe()
3 elementToBeClickable()
4 elementToBeSelected()
5 frameToBeAvaliableAndSwitchToIt()
6 invisibilityOfTheElementLocated()
7 invisibilityOfElementWithText()
8 presenceOfAllElementsLocatedBy()
9 presenceOfElementLocated()
10textToBePresentInElement()
11textToBePresentInElementLocated()
12textToBePresentInElementValue()
13titleIs()
14titleContains()
15visibilityOf()
16visibilityOfAllElements()
17visibilityOfAllElementsLocatedBy()
18visibilityOfElementLocated()
 
 
Implicit wait command, - 
 The implicit wait will tell to the web driver to wait for certain amount of time before it throws a "No Such Element Exception". The default setting is 0. Once we set the time, web driver will wait for that time before throwing an exception.
   
   ----driver.manage().timeouts().implicitlyWait(TimeOut, TimeUnit.SECONDS);
   
Fluent Wait
The fluent wait is used to tell the web driver to wait for a condition, as well as the frequency with which we want to check the condition before throwing an "ElementNotVisibleException" exception.   
   
	
Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
.withTimeout(30, TimeUnit.SECONDS) 			
.pollingEvery(5, TimeUnit.SECONDS) 			
.ignoring(NoSuchElementException.class);


Page load wait/timeout is used set amount of time to wait for page to load before throwing an exception.

---- driver.manage().timeouts().pageLoadTimeouts(20,TimeUnit.Seconds);




Locator - is a command that tells Selenium IDE which GUI elements ( say Text Box, Buttons, Check Boxes etc) its needs to operate on.


The different types of Locators in Selenium IDE

1. ID ----   This is the most common way of locating elements since ID's are supposed to be unique for each element.
2. Name ---- Locating elements by name are very similar to locating by ID, except that we use the "name=" prefix instead.
3. Link Text ----  This type of locator applies only to hyperlink texts. We access the link by prefixing our target with "link=" and then followed by the hyperlink text.

4. CSS Selector  ----- are string patterns used to identify an element based on a combination of HTML tag, id, class, and attributes.
 Tag and ID
 Tag and class
 Tag and attribute
 Tag, class, and attribute
 Inner text
 
5. DOM (Document Object Model)
 getElementById
 getElementsByName
 dom:name
 dom: index
6. XPath


******************************************************

API


HTTP Status Codes
1xx Informational. This class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by an empty line. ...
2xx Success. ...
3xx Redirection. ...
4xx Client Error. ...
5xx Server Error.



2xx: Successful
Message	Description
200 OK	The request is OK.
201 Created	The request is complete, and a new resource is created .
202 Accepted	The request is accepted for processing, but the processing is not complete.
203 Non-authoritative Information	The information in the entity header is from a local or third-party copy, not from the original server.
204 No Content	A status code and a header are given in the response, but there is no entity-body in the reply.
205 Reset Content	The browser should clear the form used for this transaction for additional input.
206 Partial Content	The server is returning partial data of the size requested. Used in response to a request specifying a Range header. The server must specify the range included in the response with the Content-Range header.

4xx: Client Error
Message	Description
400 Bad Request	The server did not understand the request.
401 Unauthorized	The requested page needs a username and a password.
402 Payment Required	You can not use this code yet.
403 Forbidden	Access is forbidden to the requested page.
404 Not Found	The server can not find the requested page.
405 Method Not Allowed	The method specified in the request is not allowed.


Some of the HTTP methods are

GET: It enables you to retrieve data from a server
POST: It enables you to add data to an existing file or resource in a server
PUT: It lets you replace an existing file or resource in a server
DELETE: It lets you delete data from a server
PATCH: It is used to apply partial modifications to a resource
OPTIONS: It is used to describe the communication options for the target resource
HEAD: It asks for a response identical to that of a GET request, but without the response body

Jenkins ----

CI : continuous integration...in this the integrity is tested which includes whether test is build correctly, framework is accepted, server and actors are configured

CD: continuous deployment.this happens after CI job is successful, under this whole repository is executed on jenkins




Top 25 Selenium WebDriver Commands That You Should Know
#1) get()
#2) getCurrentUrl()
#3) findElement(By, by) and click()
#4) isEnabled()
#5) findElement(By, by) with sendKeys()
#6) findElement(By, by) with getText()
#7) Submit()
#8) findElements(By, by)

TestNG Annotations:
Following is the list of the most useful and favourable annotations in TestNG:

Annotation	Description
@Test	The annotation notifies the system that the method annotated as @Test is a test method
@BeforeSuite	The annotation notifies the system that the method annotated as @BeforeSuite must be executed before executing the tests in the entire suite
@AfterSuite	The annotation notifies the system that the method annotated as @AfterSuite must be executed after executing the tests in the entire suite
@BeforeTest	The annotation notifies the system that the method annotated as @BeforeTest must be executed before executing any test method within the same test class
@AfterTest	The annotation notifies the system that the method annotated as @AfterTest must be executed after executing any test method within the same test class
@BeforeClass	The annotation notifies the system that the method annotated as @BeforeClass must be executed before executing the first test method within the same test class
@AfterClass	The annotation notifies the system that the method annotated as @AfterClass must be executed after executing the last test method within the same test class
@BeforeMethod	The annotation notifies the system that the method annotated as @BeforeMethod must be executed before executing any and every test method within the same test class
@AfterMethod	The annotation notifies the system that the method annotated as @AfterMethod must be executed after executing any and every test method within the same test class
@BeforeGroups	The annotation notifies the system that the method annotated as @BeforeGroups is a configuration method that enlists a group and that must be executed before executing the first test method of the group
@AfterGroups	The annotation notifies the system that the method annotated as @AfterGroups is a configuration method that enlists a group and that must be executed after executing the last test method of the group


cucumber test runner class

package cucumberTest;

@RunWith(Cucumber.class)
@cucumberOptions(features = "Feature"
				,plugin = {"pretty", "html:target/cucumber-html-report"}	
				,glue = "stepDefination"
				,monochrome = "True"-------->the console output for the Cucumber test are much more readable
				,dryRun = "true")----------> Checks if all the steps have the steps defination
				,tags = {"@Smoketest , E2Etest"} --> (,) means OR 
				,tags = {"@Smoketest" , "E2Etest"} --> (") means AND
				)
public class TestRunner{
} 


Meaning 
#Author: your.email@your.domain.com
#Keywords Summary :
#Feature: List of scenarios.
#Scenario: Business rule through list of steps with arguments.
#Given: Some precondition step
#When: Some key actions
#Then: To observe outcomes or validation
#And,But: To enumerate more Given,When,Then steps
#Scenario Outline: List of steps for data-driven as an Examples and <placeholder>
#Examples: Container for s table
#Background: List of steps run before each of the scenarios
#""" (Doc Strings)
#| (Data Tables)
#@ (Tags/Labels):To group Scenarios
#<> (placeholder)
#""
## (Comments)
#Sample Feature Definition Template





Data table in cucumber

for passing test data from feature files to your test scripts.

| Aniket | Farkase |


Maps in Data Tables with Header

header means to have a top row which tells what type of data you have. 

	1. Data table without a header
	
	| Aniket | Farkase |
	| Pratik | Farkase |
	| Mitali | Farkase |
	
	public method(Datatable creadentials)
	List<List<String>> data = credentials.raw();
	driver.findElement(By.name("username")).sendKeys(data.get(0).get(0))
	
	2. Data table with a header 

	| FirstName   | Lastname |
	| Aniket 	  | Farkase  |
	| Pratik 	  | Farkase  |
	| Mitali 	  | Farkase  |

Java
Scenario: Successful Login with Valid Credentials
	Given User is on Home Page
	When User Navigate to LogIn Page
	And User enters Credentials to LogIn
	| Username   | Password |
    | testuser_1 | Test@153 |
	Then Message displayed Login Successfully


public method(Datatable creadentials)
List<Map<String , String >> data = credentials.asMaps(String.class, String.class);
	 driver.findElement(By.id("log")).sendKeys(data.get(0).get("Username")); 
     driver.findElement(By.id("pwd")).sendKeys(data.get(0).get("Password"));
     driver.findElement(By.id("login")).click();


Hookes are used in the cucumber to define the pre conditions and post conditions

2hookes

@Before --- allows you to run a block of code before every scenario. 

@Before
public void before(Scenario scenario) {
    System.out.println("------------------------------");
    System.out.println("Starting - " + scenario.getName());
    System.out.println("------------------------------");
}



@After ---- runs your block of code at the end of each scenario
@After
public void before(Scenario scenario) {
    System.out.println("------------------------------");
    System.out.println(scenario.getName() + " Status - " + scenario.getStatus());
    System.out.println("------------------------------");
	

cucumber tags api package is used to run multiple test cases based on test runner class
tags = {"@Smoketest , E2Etest"} --> (,) means OR 
tags = {"@Smoketest" , "E2Etest"} --> (") means AND

In JUnit 5, test lifecycle is driven by 4 primary annotations i.e. @BeforeAll, @BeforeEach, @AfterEach and @AfterAll. Along with it, each test method must be marked with @Test annotation. @Test annotation is virtually unchanged, although it no longer takes optional arguments.

public class AppTest {
     
    @BeforeAll
    static void setup(){
        System.out.println("@BeforeAll executed");
    }
     
    @BeforeEach
    void setupThis(){
        System.out.println("@BeforeEach executed");
    }
     
    @Test
    void testCalcOne() 
    {
        System.out.println("======TEST ONE EXECUTED=======");
        Assertions.assertEquals( 4 , Calculator.add(2, 2));
    }
     
    @Test
    void testCalcTwo() 
    {
        System.out.println("======TEST TWO EXECUTED=======");
        Assertions.assertEquals( 6 , Calculator.add(2, 4));
    }
     
    @AfterEach
    void tearThis(){
        System.out.println("@AfterEach executed");
    }
     
    @AfterAll
    static void tear(){
        System.out.println("@AfterAll executed");
    }
}

Maven life cycle

Maven is based on the central concept of a build lifecycle. 
Process for building and distributing a particular artifact (project) is clearly defined.

A Build Lifecycle is Made Up of Phases - 

validate - validate the project is correct and all necessary information is available
compile - compile the source code of the project
test - test the compiled source code using a suitable unit testing framework. 
		These tests should not require the code be 	packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR.
verify - run any checks on results of integration tests to ensure quality criteria are met
install - install the package into the local repository, for use as a dependency in other projects locally
deploy - done in the build environment, copies the final package to the remote repository
			for sharing with other developers and projects.


Building a Project with Maven


1. mvn verify - The vast majority of Maven-built projects can be built with the following command:


 There are three built-in build lifecycles: 
 default, clean and site. 

 default lifecycle handles your project deployment, 
 clean lifecycle handles project cleaning, 
 site lifecycle handles the creation of your project's site documentation.


artifactId is the name of the jar without version.

Archetype is a Maven project templating toolkit. 
          An archetype is defined as an original pattern or model from which all other things of the same kind are made. 

A Maven settings.xml file defines values that configure Maven execution in various ways. 
Most commonly, it is used to define a local repository location, alternate remote repository servers, and authentication information for private repositories.
Maven will download the artifact.
mvn -s settings.xml dependency:list

Creating a project
create java project:

$ mvn archetype:generate  -DgroupId=org.yourcompany.project -DartifactId=application
create web project:

$ mvn archetype:generate  -DgroupId=org.yourcompany.project -DartifactId=application
-DarchetypeArtifactId=maven-archetype-webapp


Basic project tasks

$ mvn clean
clean project: will delete target directory:

$ mvn validate
validate project: validate the project is correct and all necessary information is available:

$ mvn compile
compile project: compile source code, classes stored in target/classes:

$ mvn test
test project: run tests using a suitable unit testing framework:

$ mvn package
package project: take the compiled code and package it in its distributable format, such as a JAR / WAR:

$ mvn verify
verify project: run any checks to verify the package is valid and meets quality criteria:

$ mvn install
install project: install the package into the local repository, for use as a dependency in other projects locally:


deploy project: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects:

$ mvn deploy
deploy-file: can be used for deploying a external jar file to repository:


WebDriver Methods
Method Name :- get() Syntax: get(url) ...
Method Name: getCurrentUrl() Syntax: getCurrentUrl() ...
Method Name: getTitle() Syntax: getTitle() ...
Method Name: findElements() Syntax: findElements(By by) ...
Method Name: findElement() ...
Method Name: getPageSource() ...
Method Name: close() ...
Method Name: quit()


break statement -----

is encountered inside a loop, the loop is immediately terminated and 
the program control resumes at the next statement following the loop.
It can be used to terminate a case in the switch statement 
Syntax

public class Test {
   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers ) {
         if( x == 30 ) {
            break;
         }
         System.out.print( x );
         System.out.print("\n");
      }
   }
}
output = 10
output = 20

***********************************************

Continue keyword 

It causes the loop to immediately jump to the next iteration of the loop.

In a for loop, the continue keyword causes control to immediately jump to the update statement.
In a while loop or do/while loop, control immediately jumps to the Boolean expression.
Syntax

public class Test {
   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers ) {
         if( x == 30 ) {
            continue;
         }
         System.out.print( x );
         System.out.print("\n");
      }
   }
}
Output:
10

20

40

50


difference between hashset and treeset in java

First major difference between HashSet and TreeSet is performance. 
HashSet is faster than TreeSet and should be preferred choice if sorting of element is not required. ... 
HashSet doesn't guaranteed any order while TreeSet maintains objects in Sorted order defined by either Comparable or Comparator method in Java

How to find an element having random id attribute through Selenium
When last 2 numerical digits change randomly,

driver.findElement(By.xpath("//input[contains(@id,'start-time-hours-c')]"));
Using 2 attributes of Input tag,

driver.findElement(By.xpath("//input[@name='startTimeHours' and @class='focused']"));


Wildcards in Java

when you want to relax the restrictions on a variable.
It represents an unknown type. 

  Types of wildcards in Java:

1. Upper Bounded Wildcards: To declare an upper-bounded wildcard, use the wildcard character (‘?’), followed by the extends keyword, followed by its upper bound.

2. Lower Bounded Wildcards:  using the wildcard character (‘?’), followed by the super keyword, followed by its lower bound: <? super A>.

3. Unbounded Wildcard: This wildcard type is specified using the wildcard character (?), for example, List. This is called a list of unknown type. These are useful in the following cases
When writing a method which can be employed using functionality provided in Object class.
When the code is using methods in the generic class that don’t depend on the type parameter


 velocity of the sprint
figures out how much work Agile can complete in a sprint and how much time will it need to finish a project.
first – completed story points X team capacity: If you measure capacity as a percentage of a 40 hours weeks
Second – completed story points / team capacity: If you measure capacity in man-hours

Both inner and outer joins are used to combine rows from two or more tables into a single result. This is done using a join condition. The join condition specifies how columns from each table are matched to one another. ... Inner joins don't include non-matching rows; whereas, outer joins do include them.


TESTNG - TEST DRIVEN DEVELOPMENT FRAME WORK

Unit test framework
open source , free , jar files

--- 1. dataprovider
--- 2. HTML reports 
--- 3. different annotations
--- 4. priorities sequences 
		- @Test(Priority=1)
		- @Test(Priority=2)
---	5. Grouping 
		- @Test(Priority=1,groups="Title")
		- @Test(priority=2,groups="Title")
		- @Test(priority=3,groups="Test")
		- @Test(priority=4,groups="Test")
--- 6. dependencies

	// below methods depends on login method
	//if login fails below methods will not executed and skipped
	//if login pass then below methods will be executed
		1. Methods
		- @Test(DependsOnMethods="method name")
		
		2. Groups		
		- @Test(DependsOngroups="group name")
	// 3 methods under group Login
	//logintest
	//Homepagetest
	//searchpagetest
	
	// 4 methods are dependent on login group
	//Regpagetest
	//Enterdata
	//Clickbutton
	//Linktext
		

TESTNG Sequence - STCM@testMCTS
	1. @BeforeSuite  - Enter system property for chrome
	2. @BeforeTest -launch chrome browser
	3. @BeforeClass - login method
	4. @BeforeMethod -enter URL
	5. @Test -get title of page
	6. @AfterMethod - page logout
	7. @AfterClass - closebrowser
	8. @AfterTest - deleteallcookies
	PASSED: gettitlepage
	9. @AfterSuite - generateTestReport


for every test combination will be

	1. @BeforeMethod 
	2. @Test - 1
	3. @AfterMethod 

	1. @BeforeMethod 
	2. @Test - 2
	3. @AfterMethod 

Testng Parameter  / environment variables not test data	
--- @Test
    @Parameters({"url","emailid"}) -----------------> same in testng.xml
	public void yahoologintest(String url, String emailid) {
		
		driver.get(url);
		driver.findElement(By.xpath("//*[@id='login-username']")).clear();
		driver.findElement(By.xpath("//*[@id='login-username']")).sendKeys("emailid");
		
		
Testng.xml file or Testng template file 

--- testng.xml is used to execute all testcases one by one , all classes one by one

<suite name="Yahoo test automation suite">
	<test name="Yahoo app test">
		<parameter name="url" value="https://login.yahoo.com"></parameter>
		<parameter name="emailid" value="test@yahoo.com"></parameter>
		
		<classes>
			<class name="testNGDemo.Parameter_Testng"></class>
		</classes>
	</test>
</suite>


How do I run only 3 test cases out of 5 using TestNG Annotation in selenium testing?

----1. setup the condition enabled true or false in Test annotation.

@Test(enabled=true)

Sample testng script to run the class.

<suite name = "Suite">
   <test name = "test">
     <classes>
         <class name = "TestClass" />
      </classes>
   </test>
</suite>


*************************************************


2. setup the group details at Test annotation.

@Test(group = {functionalTest} )

Sample script to run the class

<suite name = "Suite">
   <test name = "test">
      <groups>
         <run>
            <include name = "functionalTest" />
         </run>
      </groups>
      <classes>
         <class name = "TestClass" />
      </classes>
   </test>
</suite>

*******************************************************

3. Without using annotation

---1.With Include Option:
<suite name = "Suite">
   <test name = "test">
      <classes>
         <class name = "TestClass">
			<methods>
					<include name= "FirstCase"/>
					<include name= "SecondCase"/>
					<include name= "ThirdCase"/>
			</methods>
		</class>
      </classes>
   </test>	
</suite>


---2.With Exclude Option: 
<suite name = "Suite">
   <test name = "test">
      <classes>
         <class name = "TestClass">
			<methods>
					<exclude name= "FourthCase"/>
					<exclude name= "FifthCase"/>
			</methods>
		</class>
      </classes>  
   </test>		
</suite>
	

-- difference between findElements and findElement??

	1. Find Element command takes in the By object as the parameter and returns an object of type WebElement. 
	   The findElement method throws a NoSuchElementException exception when the element is not available on the page. 

	2. Find Elements command takes in By object as the parameter and returns a list of web elements.
	   The findElements method returns an empty list when the element is not available or doesn't exist on the page


How to Handle AJAX Call in Selenium Webdriver 

--- biggest challenge in handling Ajax call is knowing the loading time for the web page. 
	So by executing this wait command, selenium will suspend the execution of current Test Case and wait for the expected or new value. When the new value or field appears, the suspended test cases will get executed by Selenium Webdriver.
	
		ThreadSleep
		Implicit Wait
		Explicit Wait
		WebdriverWait
		Fluent Wait
		Creating automated test request may be difficult for testing tools as such AJAX application often use different encoding or serialization technique to submit POST data.



Challenges in  selenium automation

1.	Handling duplicate elements on the web page - by different types of xpath and css selector.

2.  Hand dynamically changing elements on the webpage - by writing keyword contains('string pattern') in xpaths 

3. Handling alerts/popups - for windows popups use Robot frame work or AUTOIT

4. Multiple windows and child windows - Store the session ids based on which nagivate to multiple windows.

5. dynamic web tables handling - data entered in different page and populating on other page - by using parent and child ancestros xpaths 

6. Iframes in iframes - to find elements in iframe use driver.switchto(iframe name or index)

7. Executing selenium script on IE browser - script work on chrome but not IE overcome by different locators and waits

8. When we are uploading on downloading files - use AUTOIT or robot frame work

9. Creating object repository - not created by default so use PAge object Model

10. Sendkeys and click not working on the webpage - java script executor

11. Ajax calls in webpage - NoSuchElementFoundException - 

			- trying to find element on webpage and u get NoSuchElementFoundException coz u need to perform some action like enter data etc.
			1. provide synchronisation 
			or 2. click on any other webelement before clicking on the button or something
			
12. NULL POINTER exception - Test data issue - 			
			

Jenkins  - 

1. FREE STYLE project run.bat file 
*******************************************************************
1. new items -> Free style project (Configuration page)
2. build -> Add Build step -> "Execute windows batch command" 
3. under Command -> "cd"  "dir location"
 ex : cd C:\test\script
	  run.bat	
4. Apply save
5. click on Build now - to run .bat file

grey colour -> not yet executed
blue -> passed
red -> failed
---------------------------------------

2.  Execute project using MAVEN(POM.xml)
*******************************************************************

1. Install plugins in jenkins 
		* Manage jenkins -> MAnage plugins - > click
		* go to Available -> select all maven related plugins
		* install without Restart button 
		* Re login
2. go to Global tool configuration  -> JDK installations --> set JDK path (name and JAVA HOME)

3. New Item -> Item name (Project name) -- Maven project -- Build --
	While configuring project , in build section
	Root pom - C:\user\admin\myworkspace\pom.xml

4. Goals and options - Clean install     


git --> local repository 
git hub -> remote repository























 






